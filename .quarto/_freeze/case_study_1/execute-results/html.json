{
  "hash": "74a2792ca35184ff1ab64e1440f7255a",
  "result": {
    "markdown": "# Case study 1: Rana Pretiosa\n\nThe first case study is about animal ecology, we will be looking at a frog particular specie **Rana Pretiosa**, scientific name **Rana pretiosa Baird & Girard, 1853**, and use some interesting data from Oregon as well as downloading more data from **GBIF \\| Global Biodiversity Information Facility**.\n\nThe scope is to visualize the presence of these nice little frogs across different location with making a map using {ggplot2} by Hadley Wickham.\n\n### Get started making a map!\n\nThe first map that we make is a general frog location map of the United States. In this case we need the {spocc} package by Hannah Owens and Vijay Barve and Scott Chamberlain, to load the data from GBIF and make the map.\n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(oregonfrogs)\nlibrary(spocc)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"data/case_study_1.RData\")\n```\n:::\n\n::: {.cell hash='case_study_1_cache/html/ch2-01_6bdded3e9a537a7a8ee9a48ff3a2f782'}\n\n```{.r .cell-code}\ndo_gbif <- occ(\"Rana pretiosa Baird & Girard, 1853\",\n               from = \"gbif\",\n               limit = 1000,\n               has_coords = TRUE\n               )\n\ndo_gbif1 <- data.frame(do_gbif$gbif$data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_gbif2 <- do_gbif1%>%\n  rename(longitude=Rana_pretiosa_Baird_._Girard._1853.longitude,\n         latitude=Rana_pretiosa_Baird_._Girard._1853.latitude)\n```\n:::\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nstates<- map_data(\"state\")\noregon <- states %>% filter(region==\"oregon\")\n\nggplot(data = states, mapping = aes(long,lat,group=region))+\n  geom_polygon(color=\"grey\",fill=NA) +\n  geom_polygon(data = oregon, \n               inherit.aes = TRUE, \n               color=\"pink\",fill=\"pink\") +\n  geom_point(data = do_gbif2,\n             mapping = aes(x=longitude, y=latitude),\n             inherit.aes = FALSE, \n             alpha=0.5,size=0.5)+\n  coord_quickmap() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](case_study_1_files/figure-html/ch2-03-1.png){width=672}\n:::\n:::\n\n\nOnce visualized, we will be making some assumptions about their movement and habitat use based on the results of a study by Dr. Michael J Adams from the Forest and Rangeland Ecosystem Science Center in Oregon.\n\nMore information about this study can be found here: https://doi.org/10.1670/20-060\n\nThe dataset has been released for #TidyTuesday 2022 week 31 and can be downloaded here: https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-08-02\n\nOr, you can install the package from github: https://github.com/Fgazzelloni/oregonfrogs\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Credits: oregonfrogs package](images/oregonfrogs.png){fig-align='center' width=30%}\n:::\n:::\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\n# install.packages(\"remotes\")\nremotes::install_github(\"fgazzelloni/oregonfrogs\")\n```\n:::\n\n\nOne of the most important step of spatial modeling, and modeling in general, is to have a good knowledge of the argument. So, the more we know about **Rana Pretiosa** the better!\n\nLet's hear **Rana Pretiosa** sound: https://amphibiaweb.org/species/5131\n\nMore information about Rana pretiosa can be found here:\n\n-   [GBIF](https://www.gbif.org/species/2426776)\n\nIn particular, we will be looking at the location where **rana pretiosa** has been located with the use of radio telemetry frequencies in the **Crane Prairie Reservoir**, which is a man-made lake located about 42 miles (68 km) southwest of Bend in Deschutes County, Oregon, United States.[^case_study_1-1]\n\n[^case_study_1-1]: [Crane Prairie Reservoir](https://en.wikipedia.org/wiki/Crane_Prairie_Reservoir)\n\nAn interesting map of the lake with related data can be found here: [Lake and Reservoir in Deschutes County in Oregon map data](https://data.deschutes.org/datasets/deschutes::lakes-and-reservoirs-1/explore)\n\nWe will require more packages while performing our analysis.\n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nlibrary(oregonfrogs)  \n```\n:::\n\n\nLet's have a look at the data, we have 311 observations and 16 variables which include the habitat type, the date, the radio frequency, and other variables such as gender, type of water, presence of beavers, and if they are captured, located or just visualized.\n\nSo, many interesting hypothesis can be done about their movements habitat use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noregonfrogs%>%head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 16\n  Site    Subsite HabType Surve…¹ Ordinal Frequ…² UTME_83 UTMN_83 Inter…³ Female\n  <chr>   <chr>   <chr>   <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>  <dbl>\n1 Crane … SE Pond Pond    9/25/2…     268    164.  597369 4846486       0      0\n2 Crane … SE Pond Pond    10/2/2…     275    164.  597352 4846487       1      0\n3 Crane … SE Pond Pond    10/9/2…     282    164.  597345 4846458       2      0\n# … with 6 more variables: Water <chr>, Type <chr>, Structure <chr>,\n#   Substrate <chr>, Beaver <chr>, Detection <chr>, and abbreviated variable\n#   names ¹​SurveyDate, ²​Frequency, ³​Interval\n```\n:::\n:::\n\n\nOne more interesting information is about the location, in this case a **UTM distance** (from the Equator or from the North) is provided, and this type of localization is the most suitable for animal location.\n\nThe **Universal Transverse Mercator (UTM)** is a common projection is which preserves local angles and shapes, and divides the Earth into 60 zones of 6 degrees of longitude in width. Each of the zones uses a transverse Mercator projection that maps a region of large north-south extent. [^case_study_1-2]\n\n[^case_study_1-2]: [Geospatial Health Data: Modeling and Visualization with R-INLA and Shiny](https://www.paulamoraga.com/book-geospatial/sec-spatialdataandCRS.html)\n\nInteresting is that it is expressed in meters, so it gives more opportunity in case one wants to consider the distance. For now, we transform these UTM projections into **longitude** and **latitude**. For doing this we need the {sf} package by Edzer Pebesma.\n\nMany are the GIS packages available in R to use, and sometime is difficult to make a choice as they are all very useful and interesting.\n\nTo transform the UTM values into long and lat we use the `sf::st_as_sf()` function with some arguments which are compulsory for what we do.\n\nWe need to specify where the coordinates are located in our set, and set a **CRS** or coordinate reference system information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build a tibble with the geo-location information\nfrogs_coord <- oregonfrogs %>%\n  dplyr::select(UTME_83, UTMN_83)\n\n# Tranform it to lat and long\nfrogs_coord <- \n  frogs_coord %>% \n  # transform to simple features as geometry\n  sf::st_as_sf(coords = c(1,2), \n               crs = \"+proj=utm +zone=10\") %>%\n  # utm tranformation to longlat\n  sf::st_transform(crs = \"+proj=longlat +datum=WGS84\")  %>%\n  tibble()\n\nfrogs_coord%>%head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n              geometry\n           <POINT [°]>\n1 (-121.7903 43.76502)\n2 (-121.7905 43.76503)\n3 (-121.7906 43.76477)\n```\n:::\n:::\n\n\nAs you can see the first projection points to *utm* as the type of data provided and set the zone 10. While the second transformation applies to longlat types projection on WGS84, (World Geodetic System 1984, known as EPSG:4326), which express the degree of longitude and latitude starting from a particular point of view, in this case EPSG:4326.\n\n\n::: {.cell layout-align=\"center\" fig.dim='50%'}\n::: {.cell-output-display}\n![Credits: https://epsg.io/4326](images/epsg_4326.png){fig-align='center' width=282}\n:::\n:::\n\n\nAll the available CRS in R can be seen by typing `View(rgdal::make_EPSG())` [^case_study_1-3]\n\n[^case_study_1-3]: [book geospatial](https://www.paulamoraga.com/book-geospatial/sec-spatialdataandCRS.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\nfrogs_location <- tibble(Detection = oregonfrogs$Detection,\n                         Subsite = oregonfrogs$Subsite,\n                         Frequency = oregonfrogs$Frequency,\n                         lat = unlist(map(frogs_coord$geometry, 2)),\n                         long = unlist(map(frogs_coord$geometry, 1)))\n\nfrogs_location%>%head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  Detection Subsite Frequency   lat  long\n  <chr>     <chr>       <dbl> <dbl> <dbl>\n1 Captured  SE Pond      164.  43.8 -122.\n2 No visual SE Pond      164.  43.8 -122.\n3 No visual SE Pond      164.  43.8 -122.\n```\n:::\n:::\n\n\n## Look at oregonfrogs data\n\nLet's have a first sight at the data based on location. The first thing to notice is that points (frogs) are aligned following some sort of linearity. But, what is the difference from other data, is that now these points are following an environment. Let's have a look at it.\n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nggplot(data = frogs_location, aes(x=long,y=lat))+\n  geom_point() +\n  geom_smooth(method = \"loess\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](case_study_1_files/figure-html/ch2-11-1.png){width=672}\n:::\n:::\n\n\n### Let's map the lake!\n\nHow do we set the map for the location of our **Rana Pretiosa** in the Crane Prairie Reservoir?\n\nIn the study page we can find the **BOX**, the box is the four corner reference points, bounding our interested area.\n\nBounding Box: https://www.sciencebase.gov/catalog/item/imap/60ba5a00d34e86b9388d86bc\n\nBounding Box\\[-121.824775, 43.764375, -121.764923, 43.814821\\]\n\nThe area can be retrieved with {OpenStreetMap} package by : Ian Fellows and visualized with a nice resolution with the `plot.OpenStreetMap()` or simply the `plot()` function. The {OpenStreetMap} doesn't work the same for all systems. You'll might need to use another package, such as {ggmap} which provide the same background map to use with {ggplot2}.\n\nSo, don't run this part if you incurr issues with {OpenStreetMap}, jump on the next one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(OpenStreetMap)\nmap <- openmap(c(43.764375,-121.824775),c(43.814821,-121.764923))\n\nOpenStreetMap::plot.OpenStreetMap(map)\nwider_map <- openproj(map)\nbase_map <- OpenStreetMap::autoplot.OpenStreetMap(wider_map) + \n  geom_point(data = frogs_location,\n             aes(x = long, y = lat), \n             shape=21,stroke=0.2, size =  4,\n             color=\"grey40\") +\n  xlab(\"Longitude (°E)\") + ylab(\"Latitude (°S)\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Crane Prairie Reservoir](images/background_map.png){width=50%}\n:::\n:::\n\n\nIn this map is made with {ggmap} and {ggplot2} for the frogs locations.\n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nlibrary(ggmap)\n```\n:::\n\n::: {.cell hash='case_study_1_cache/html/ch2-14_37df659a0079236106aa1c7cdaeebe1e'}\n\n```{.r .cell-code}\nbox=c(43.764375,-121.824775,43.814821,-121.764923)\ncrane_reservoir <- get_stamenmap(bbox = c(left = -121.824775, \n                                          bottom = 43.764375, \n                                          right = -121.764923, \n                                          top = 43.814821),\n                                 zoom = 13, color = c(\"color\"),\n                                 maptype = \"terrain-background\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_map <- ggmap(crane_reservoir) + \n    geom_point(data = frogs_location,\n             aes(x = long, y = lat), \n             shape=21,stroke=0.2, size =  4,\n             color=\"grey40\") +\n  xlab(\"Longitude (°E)\") + ylab(\"Latitude (°S)\")\n\nbase_map\n```\n\n::: {.cell-output-display}\n![](case_study_1_files/figure-html/ch2-15-1.png){width=672}\n:::\n:::\n\n\n## Time as coordinate\n\nWith a little modification of the dataset we can visualize the frogs by months. This study has been carried from mid September 2018 to late November of the same year, so three months of observations.\n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nfrogs_location_tm <- tibble(ReportedDay = oregonfrogs$Ordinal,\n                            geometry=frogs_coord$geometry) %>%\n  mutate(time = as.Date(\"2018-01-01\") + ReportedDay,\n         month=lubridate::month(time))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_map +\n  geom_sf(data = frogs_location_tm,\n          aes(col = factor(month), geometry = geometry),\n          inherit.aes = F) +\n  facet_wrap(~cut(time, \"1 months\")) + \n  scale_color_discrete(labels = c(\"September\",\"October\",\"November\"))+\n  labs(color = \"Month\")+\n  theme_void()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/base_map_by_month.png){width=732}\n:::\n:::\n\n\nSome speculation could be done about the reasons why the frogs are not located in some substrates of the lake in September more than in November.\n\n## Make a grid\n\nLet's create a grid of points around the frogs' locations. In order to do that we need the {sf} package, initially we do the same as before, but now we want a **Simple feature** collection of points and not a tibble with coordinates as before. The functions `sf::st_make_grid()` and `sf::st_as_sfc(sf::st_bbox(points))` with the bbox reference for the points let us create a grid.\n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\n# make a grid\nfrogs_coord_freq <- tibble(oregonfrogs$UTME_83, oregonfrogs$UTMN_83,\n                      oregonfrogs$Frequency)\n\npoints <- sf::st_as_sf(x = frogs_coord_freq, \n                       coords = c(1,2), \n                       crs = \"+proj=utm +zone=10\") %>%\n  sf::st_transform(frogs_coord, \n                   crs = \"+proj=longlat +datum=WGS84\")  \n```\n:::\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\ngrid = sf::st_make_grid(\n  sf::st_as_sfc(sf::st_bbox(points)),\n  what = \"centers\",\n  cellsize = .002, \n  square = F)\n```\n:::\n\n\nWhat we do now is to group the frogs by date.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noregonfrogs%>%\n  mutate(SurveyDate=as.Date(SurveyDate,\"%m/%d/%Y\"))%>%\n  arrange(SurveyDate)%>%\n  count(SurveyDate,Ordinal)%>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  SurveyDate Ordinal     n\n  <date>       <dbl> <int>\n1 2018-09-12     255     3\n2 2018-09-13     256     3\n3 2018-09-18     261     7\n```\n:::\n:::\n\n\n## Work with Models\n\nPackages functionality from rgeos,raster,rgdal,terra packages are included in {sf},and {dismo} so we don't need to load them.\n\n\n::: {.cell paged.print='false'}\n\n```{.r .cell-code}\nlibrary(dismo)  # for modeling\n```\n:::\n\n\nHere we use **wrld_simpl** data from {maptools}, to be able to use the `plot()` function faster, you can install the package or load it because data is included in the `/data` folder as `.RData` format. We can load the `data/case_study_1.RData` to load all the data we need for this workshop, this is already been done at the very beginning of this chapter. In case you'd like to do that separately, just type: `load(\"data/case_study_1.RData\")` and all data will be loaded in the global environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld <- map_data(\"world\")\ngbi_coords<- tibble(x=do_gbif2$longitude,y=do_gbif2$latitude)\n\nggplot(world)+\n  geom_polygon(aes(long,lat,group=group),fill=\"grey90\",color=\"grey30\") +\n  geom_polygon(data=states, aes(long,lat,group=group),color=\"grey40\") +\n  geom_point(data = gbi_coords, aes(x,y),\n             color=\"pink\") +\n  coord_sf(xlim=c(-125,-90),ylim=c(35,65))+\n  ggthemes::theme_map()\n```\n:::\n\n\nThis is a raster stack composed of 19 raster layers.\n\n\n::: {.cell hash='case_study_1_cache/html/ch2-21_1acb47dddbcca34b393cc63b759f77c2'}\n\n```{.r .cell-code}\nfrogs <-data.frame(long=do_gbif2$longitude,lat=do_gbif2$latitude)\nclimate <- dismo::getData(\"worldclim\",download = T,var=\"bio\",res=2.5)\n\nplot(climate,legend=false)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/climate_plot.png){width=1190}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfrog_climate <- extract(climate,frogs)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfrog_climate %>% head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     bio1 bio2 bio3 bio4 bio5 bio6 bio7 bio8 bio9 bio10 bio11 bio12 bio13 bio14\n[1,]  100   85   34 5669  237  -11  248   32  171   171    27  1737   248    53\n[2,]   72   88   33 6123  220  -43  263    1  151   151    -4  1514   225    47\n[3,]   59   83   35 5268  194  -40  234    1  127   129    -3  1731   258    49\n     bio15 bio16 bio17 bio18 bio19\n[1,]    48   731   184   184   667\n[2,]    50   656   161   161   599\n[3,]    50   749   178   195   687\n```\n:::\n:::\n\n\nApply the **Bioclim algorithm** used for species distribution modeling, the classic **climate-envelope-model**. It computes the similarity of a location by comparing the values of environmental variables at any location to a percentile distribution of the values at known locations of occurrence. More info here: `?dismo::bioclim`\n\nWe use the `pairs(x, v=NULL, pa='pa', hist=TRUE, cor=TRUE)` function to plot the results of the model, with options from the {dismo} package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(dismo)\nbioclim.mod <- dismo::bioclim(frog_climate)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(bioclim.mod,pa=\"pa\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/pairs_bioclim.png){width=1210}\n:::\n:::\n\n\nNow, let's build a stack with the `stack()` function, including all the bioclimatic layers from the original raster stack.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoParallel::registerDoParallel()\npredictors <- stack(climate$bio1,climate$bio2,climate$bio3,\n                    climate$bio4,climate$bio5,\n                    climate$bio6,climate$bio7,climate$bio8,\n                    climate$bio9,climate$bio10,climate$bio11,\n                    climate$bio12,climate$bio13,climate$bio14,\n                    climate$bio15,climate$bio16,climate$bio17,\n                    climate$bio18,climate$bio19)\npredictions <- predict(predictors,bioclim.mod)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(predictions,xlim=c(-125,-100),ylim=c(35,55),axes=T)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/frogs_location_raster.png){width=604}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n------------------------------------------------------------------------\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}