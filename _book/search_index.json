[["index.html", "Spatial model with R Chapter 1 Prerequisites", " Spatial model with R Federica Gazzelloni 2022 September 19 Chapter 1 Prerequisites This ice-breaking activity to spatial modeling with R includes two case studies: Oregon spotted frog habitat study A type of cancer spread in Scotland It is required a good manner of RStudio and a little practice in making plots with {ggplot2}. To set up install the following packages: If these packages are missing in your RStudio they would need to be installed. Please choose between {OpenStreetMap} and {ggmap}, {OpenStreetMap} has some extra Java requirement and it is not always available for the most updated versions of Mac. my_packages &lt;- c(&quot;tidyverse&quot;,&quot;ggthemes&quot;, &quot;maptools&quot;,&quot;OpenStreetMap&quot;,&quot;ggmap&quot;, &quot;spdep&quot;,&quot;sf&quot;,&quot;spocc&quot;, &quot;dismo&quot;,&quot;SpatialEpi&quot;) install.packages(my_packages, repos = &quot;http://cran.rstudio.com&quot;) install.packages(&quot;remotes&quot;) remotes::install_github(&quot;fgazzelloni/oregonfrogs&quot;) The GitHub repository for this workshop is here: https://github.com/Fgazzelloni/How-to-Spatial-Modeling-with-R Once installed the packages go to the GitHub repo above, You can fork the repository onto your RStudio, or copy and paste the code directly. Another option is to use {usethis} and some of its handling functions, for open the project in your machine. Once set go to the /data folder and load the RData in the environment. It will make things easier as you don’t need to run some chucks of code which will require some time to compute, and for this reason are set to eval = FALSE. For any questions please email: docksbox@pm.me "],["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction Spatial data is most often represented by one of two data models, vector or raster.1 In geostatistical models, sampled data are interpreted as the result of a random process.2 Spatial modeling is an important instrument to guide decision-making dealing with risk-management in different areas, such as public health, econometric, general ecology, as well as public transportation and real-estate. The development of spatial models and modeling techniques evolved along the times allowing for workflows implementation of geospatial analysis.3 An important distinction has to be made between spatial model and spatial data model. While data models are important connections between the individual perception of certain events and how those events are being represented and processed with an algorithm as spatial primitives and relationships. Spatial models are defined as process models. Dynamic spatial processes are phenomena that change in time, such as a virus spread, flood formation, and land cover change. A heuristic explanation of how point distances are calculated is to considered whether the Eulerian or the Lagrangian views are the most suitable ones. Eulerian models concern about the change of properties (e.g. temperature, land cover) at fixed locations, while Lagrangian models tracks the movement of objects in space. As said, one more important distinction is that geographic information systems (GISs) are composed of raster and vector data.4 Figure 2.1: Credits:Spatial data models In this workshop only vector data will be examined to provide insight into geographic variations in distribution of data (such as species, frogs in Oregon and/or diseases risk spread).5 In vector data models space is not quantized into discrete grid cells like the raster model, but use points and associated X, Y coordinate pairs to represent the vertices of spatial feature. In particular, will be examined location clustering and disease clustering. We will be looking at two case studies: Oregon frogs habitat locations Cancer expected development in a particular location Spatial models allows for spatial autocorrelation. In general modeling, multicollinearity, or correlation among predictors in the model is used to make predictor selection. In case of spatial modeling, predictors such as longitude and latitude are evidence of important underlying spatial processes at work; an integral component of the data. 6 Spatial data is considered typically autocorrelated and/or clustered.7 A simple explanation is concerning with the independence of correlated clusters with the changing data-information in the spatial cluster. Hence, data may be spatially correlated and observations in neighboring areas may be more similar than observations in areas that are farther away.8 The analysis of the residual spatial autocorrelation and the prediction of continuous spatial process is called Kriging(geo interpolation named after Danie Kringe (South Africa)) (also known as Wiener–Kolmogorov prediction / distance-weighted average).9 A spatial model is a representation of various social and natural processes: land cover change spread of invasive species population migration So, to be more explicit, spatial modeling combines spatial analysis and predictions. Figure 2.2: Credits:https://besjournals.onlinelibrary.wiley.com/doi/10.1111/1365-2656.13116 Krinking is even the term that defines the best model performance, and so, the best prediction. This term is considered as synonym of prediction in classical data forecasting model techniques. The integration of GIS and Multicriteria Decision-Making Analysis (MCDA) is key in providing help to decision makers in different areas. GIS-based MCDA use a linear weighted equation to combine the spatial variables.10 \\[y=\\sum_{i=1}^n{w_if(x_i)}\\] Where \\(W\\) defines a spatial neighborhood structure over the entire study region, and its elements can be viewed as weights. Under this structure, the total number of neighbors in each area is adjusted to obtain a standardized matrix: \\[w_\\text{std(i,j)}=\\frac{w_{ij}}{\\sum_{j=1}^{n}{w_{ij}}}\\] Model types: LR linear regression multivariate logistic regression modeling of weights (\\(w_i\\)) (animal habitat) discriminant analysis (community resilience to environmental disasters) support vector machine (SVM) decision-trees genetic algorithm (GA) artificial neural network (ANN) or deep neural network (DNN) Model adjustment Base spatial models are adjusted to data-type based on the type of phenomenon that is investigated. As an example, a virus spread would be best represented with a Poisson distribution, of which a log transformation can be applied. A list of the tools for making models adjustment is to decide whether to use: CAR Poisson or spatial effect of the log of the Poisson Markov chain Monte Carlo (MCMC) spatial cross validation resampling deterministic or Bayesian model (Integrated nested Laplace approximation (INLA) is a computational less-intensive alternative to MCMC designed to perform approximate Bayesian inference in latent Gaussian models) There are a number of spatial models that can be used, for Spatial and Spatio-Temporal Modelling, Prediction and Simulation. One is Kriging, while other methods are the Geographically Weighted Regression (GWR) or Inverse Distance Weighting (IDW)11 One example can be found in the {gstat} package, which provide the kringe() function.12 Finally, validation is an important step in spatial modeling work. A model can be validated by testing its prediction in another dataset or study area that is different from the dataset or study area where the model was trained, allowing for spatial correlation and spatially correlated risk factors.13 Cran Spatial↩︎ https://en.wikipedia.org/wiki/Kriging↩︎ Geospatial Analysis and Model Building↩︎ Spatial data models↩︎ Vector data models↩︎ https://pro.arcgis.com/en/pro-app/latest/tool-reference/spatial-statistics/regression-analysis-basics.htm↩︎ developing a cancer atlas↩︎ Geospatial Health Data: Modeling and Visualization with R-INLA and Shiny↩︎ Drew CA, Wiersma Y, Huettmann F. Predictive species and habitat modelling in landscape ecology: concepts and applications. 1st ed. New York: Springer; 2010. And Cressie 1993. And https://en.wikipedia.org/wiki/Kriging↩︎ geospatial analysis and model building↩︎ article towardsdatascience↩︎ gstat↩︎ r-project article↩︎ "],["case-study-rana-pretiosa.html", "Chapter 3 Case study: Rana Pretiosa", " Chapter 3 Case study: Rana Pretiosa The first case study is about animal ecology, we will be looking at a frog particular specie Rana Pretiosa, scientific name Rana pretiosa Baird &amp; Girard, 1853, and use some interesting data from Oregon as well as downloading more data from GBIF | Global Biodiversity Information Facility. The scope is to visualize the presence of these nice little frogs across different location with making a map using {ggplot2} by Hadley Wickham. 3.0.1 Get started making a map! The first map that we make is a general frog location map of the United States. In this case we need the {spocc} package by Hannah Owens and Vijay Barve and Scott Chamberlain, to load the data from GBIF and make the map. library(tidyverse) library(oregonfrogs) library(spocc) load(&quot;data/case_study_1.RData&quot;) do_gbif &lt;- occ(&quot;Rana pretiosa Baird &amp; Girard, 1853&quot;, from = &quot;gbif&quot;, limit = 1000, has_coords = TRUE ) do_gbif1 &lt;- data.frame(do_gbif$gbif$data) do_gbif2 &lt;- do_gbif1%&gt;% rename(longitude=Rana_pretiosa_Baird_._Girard._1853.longitude, latitude=Rana_pretiosa_Baird_._Girard._1853.latitude) states&lt;- map_data(&quot;state&quot;) oregon &lt;- states %&gt;% filter(region==&quot;oregon&quot;) ggplot(data = states, mapping = aes(long,lat,group=region))+ geom_polygon(color=&quot;grey&quot;,fill=NA) + geom_polygon(data = oregon, inherit.aes = TRUE, color=&quot;pink&quot;,fill=&quot;pink&quot;) + geom_point(data = do_gbif2, mapping = aes(x=longitude, y=latitude), inherit.aes = FALSE, alpha=0.5,size=0.5)+ coord_quickmap() + theme_bw() Once visualized, we will be making some assumptions about their movement and habitat use based on the results of a study by Dr. Michael J Adams from the Forest and Rangeland Ecosystem Science Center in Oregon. More information about this study can be found here: https://doi.org/10.1670/20-060 The dataset has been released for #TidyTuesday 2022 week 31 and can be downloaded here: https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-08-02 Or, you can install the package from github: https://github.com/Fgazzelloni/oregonfrogs Figure 3.1: Credits: oregonfrogs package # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;fgazzelloni/oregonfrogs&quot;) One of the most important step of spatial modeling, and modeling in general, is to have a good knowledge of the argument. So, the more we know about Rana Pretiosa the better! Let’s hear Rana Pretiosa sound: https://amphibiaweb.org/species/5131 More information about Rana pretiosa can be found here: GBIF In particular, we will be looking at the location where rana pretiosa has been located with the use of radio telemetry frequencies in the Crane Prairie Reservoir, which is a man-made lake located about 42 miles (68 km) southwest of Bend in Deschutes County, Oregon, United States.14 An interesting map of the lake with related data can be found here: Lake and Reservoir in Deschutes County in Oregon map data We will require more packages while performing our analysis. library(oregonfrogs) Let’s have a look at the data, we have 311 observations and 16 variables which include the habitat type, the date, the radio frequency, and other variables such as gender, type of water, presence of beavers, and if they are captured, located or just visualized. So, many interesting hypothesis can be done about their movements habitat use. oregonfrogs%&gt;%head(3) # A tibble: 3 × 16 Site Subsite HabType Surve…¹ Ordinal Frequ…² UTME_83 UTMN_83 Inter…³ Female &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Crane … SE Pond Pond 9/25/2… 268 164. 597369 4846486 0 0 2 Crane … SE Pond Pond 10/2/2… 275 164. 597352 4846487 1 0 3 Crane … SE Pond Pond 10/9/2… 282 164. 597345 4846458 2 0 # … with 6 more variables: Water &lt;chr&gt;, Type &lt;chr&gt;, Structure &lt;chr&gt;, # Substrate &lt;chr&gt;, Beaver &lt;chr&gt;, Detection &lt;chr&gt;, and abbreviated variable # names ¹​SurveyDate, ²​Frequency, ³​Interval One more interesting information is about the location, in this case a UTM distance (from the Equator or from the North) is provided, and this type of localization is the most suitable for animal location. The Universal Transverse Mercator (UTM) is a common projection is which preserves local angles and shapes, and divides the Earth into 60 zones of 6 degrees of longitude in width. Each of the zones uses a transverse Mercator projection that maps a region of large north-south extent. 15 Interesting is that it is expressed in meters, so it gives more opportunity in case one wants to consider the distance. For now, we transform these UTM projections into longitude and latitude. For doing this we need the {sf} package by Edzer Pebesma. Many are the GIS packages available in R to use, and sometime is difficult to make a choice as they are all very useful and interesting. To transform the UTM values into long and lat we use the sf::st_as_sf() function with some arguments which are compulsory for what we do. We need to specify where the coordinates are located in our set, and set a CRS or coordinate reference system information. # Build a tibble with the geo-location information frogs_coord &lt;- oregonfrogs %&gt;% dplyr::select(UTME_83, UTMN_83) # Tranform it to lat and long frogs_coord &lt;- frogs_coord %&gt;% # transform to simple features as geometry sf::st_as_sf(coords = c(1,2), crs = &quot;+proj=utm +zone=10&quot;) %&gt;% # utm tranformation to longlat sf::st_transform(crs = &quot;+proj=longlat +datum=WGS84&quot;) %&gt;% tibble() frogs_coord%&gt;%head(3) # A tibble: 3 × 1 geometry &lt;POINT [°]&gt; 1 (-121.7903 43.76502) 2 (-121.7905 43.76503) 3 (-121.7906 43.76477) As you can see the first projection points to utm as the type of data provided and set the zone 10. While the second transformation applies to longlat types projection on WGS84, (World Geodetic System 1984, known as EPSG:4326), which express the degree of longitude and latitude starting from a particular point of view, in this case EPSG:4326. Figure 3.2: Credits: https://epsg.io/4326 All the available CRS in R can be seen by typing View(rgdal::make_EPSG()) 16 library(purrr) frogs_location &lt;- tibble(Detection = oregonfrogs$Detection, Subsite = oregonfrogs$Subsite, Frequency = oregonfrogs$Frequency, lat = unlist(map(frogs_coord$geometry, 2)), long = unlist(map(frogs_coord$geometry, 1))) frogs_location%&gt;%head(3) # A tibble: 3 × 5 Detection Subsite Frequency lat long &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 Captured SE Pond 164. 43.8 -122. 2 No visual SE Pond 164. 43.8 -122. 3 No visual SE Pond 164. 43.8 -122. Crane Prairie Reservoir↩︎ Geospatial Health Data: Modeling and Visualization with R-INLA and Shiny↩︎ book geospatial↩︎ "],["look-at-oregonfrogs-data.html", "3.1 Look at oregonfrogs data", " 3.1 Look at oregonfrogs data Let’s have a first sight at the data based on location. The first thing to notice is that points (frogs) are aligned following some sort of linearity. But, what is the difference from other data, is that now these points are following an environment. Let’s have a look at it. ggplot(data = frogs_location, aes(x=long,y=lat))+ geom_point() + geom_smooth(method = &quot;loess&quot;) + theme_bw() 3.1.1 Let’s map the lake! How do we set the map for the location of our Rana Pretiosa in the Crane Prairie Reservoir? In the study page we can find the BOX, the box is the four corner reference points, bounding our interested area. Bounding Box: https://www.sciencebase.gov/catalog/item/imap/60ba5a00d34e86b9388d86bc Bounding Box[-121.824775, 43.764375, -121.764923, 43.814821] The area can be retrieved with {OpenStreetMap} package by : Ian Fellows and visualized with a nice resolution with the plot.OpenStreetMap() or simply the plot() function. The {OpenStreetMap} doesn’t work the same for all systems. You’ll might need to use another package, such as {ggmap} which provide the same background map to use with {ggplot2}. So, don’t run this part if you incurr issues with {OpenStreetMap}, jump on the next one. library(OpenStreetMap) map &lt;- openmap(c(43.764375,-121.824775),c(43.814821,-121.764923)) OpenStreetMap::plot.OpenStreetMap(map) wider_map &lt;- openproj(map) base_map &lt;- OpenStreetMap::autoplot.OpenStreetMap(wider_map) + geom_point(data = frogs_location, aes(x = long, y = lat), shape=21,stroke=0.2, size = 4, color=&quot;grey40&quot;) + xlab(&quot;Longitude (°E)&quot;) + ylab(&quot;Latitude (°S)&quot;) Figure 3.3: Crane Prairie Reservoir In this map is made with {ggmap} and {ggplot2} for the frogs locations. library(ggmap) box=c(43.764375,-121.824775,43.814821,-121.764923) crane_reservoir &lt;- get_stamenmap(bbox = c(left = -121.824775, bottom = 43.764375, right = -121.764923, top = 43.814821), zoom = 13, color = c(&quot;color&quot;), maptype = &quot;terrain-background&quot;) base_map &lt;- ggmap(crane_reservoir) + geom_point(data = frogs_location, aes(x = long, y = lat), shape=21,stroke=0.2, size = 4, color=&quot;grey40&quot;) + xlab(&quot;Longitude (°E)&quot;) + ylab(&quot;Latitude (°S)&quot;) base_map "],["time-as-coordinate.html", "3.2 Time as coordinate", " 3.2 Time as coordinate With a little modification of the dataset we can visualize the frogs by months. This study has been carried from mid September 2018 to late November of the same year, so three months of observations. frogs_location_tm &lt;- tibble(ReportedDay = oregonfrogs$Ordinal, geometry=frogs_coord$geometry) %&gt;% mutate(time = as.Date(&quot;2018-01-01&quot;) + ReportedDay, month=lubridate::month(time)) base_map+ geom_sf(data = frogs_location_tm, aes(col = factor(month), geometry=geometry), inherit.aes = F) + facet_wrap(~cut(time, &quot;1 months&quot;)) + scale_color_discrete(labels=c(&quot;September&quot;,&quot;October&quot;,&quot;November&quot;))+ labs(color=&quot;Month&quot;)+ theme_void() Some speculation could be done about the reasons why the frogs are not located in some substrates of the lake in September more than in November. "],["make-a-grid.html", "3.3 Make a grid", " 3.3 Make a grid Let’s create a grid of points around the frogs’ locations. In order to do that we need the {sf} package, initially we do the same as before, but now we want a Simple feature collection of points and not a tibble with coordinates as before. The functions sf::st_make_grid() and sf::st_as_sfc(sf::st_bbox(points)) with the bbox reference for the points let us create a grid. # make a grid frogs_coord_freq &lt;- tibble(oregonfrogs$UTME_83, oregonfrogs$UTMN_83, oregonfrogs$Frequency) points &lt;- sf::st_as_sf(x = frogs_coord_freq, coords = c(1,2), crs = &quot;+proj=utm +zone=10&quot;) %&gt;% sf::st_transform(frogs_coord, crs = &quot;+proj=longlat +datum=WGS84&quot;) grid = sf::st_make_grid( sf::st_as_sfc(sf::st_bbox(points)), what = &quot;centers&quot;, cellsize = .002, square = F) ggplot()+ geom_sf(data=grid,size=0.3)+ geom_sf(data=points)+ coord_sf()+ ggthemes::theme_map() What we do now is to group the frogs by date. oregonfrogs%&gt;% mutate(SurveyDate=as.Date(SurveyDate,&quot;%m/%d/%Y&quot;))%&gt;% arrange(SurveyDate)%&gt;% count(SurveyDate,Ordinal)%&gt;% head(3) # A tibble: 3 × 3 SurveyDate Ordinal n &lt;date&gt; &lt;dbl&gt; &lt;int&gt; 1 2018-09-12 255 3 2 2018-09-13 256 3 3 2018-09-18 261 7 "],["work-with-models.html", "3.4 Work with Models", " 3.4 Work with Models Packages functionality from rgeos,raster,rgdal,terra packages are included in {sf},and {dismo} so we don’t need to load them. library(dismo) # for modeling Here we use wrld_simpl data from {maptools}, to be able to use the plot() function faster, you can install the package or load it because data is included in the /data folder as .RData format. We can load the data/case_study_1.RData to load all the data we need for this workshop, this is already been done at the very beginning of this chapter. In case you’d like to do that separately, just type: load(\"data/case_study_1.RData\") and all data will be loaded in the global environment world &lt;- map_data(&quot;world&quot;) gbi_coords&lt;- tibble(x=do_gbif2$longitude,y=do_gbif2$latitude) ggplot(world)+ geom_polygon(aes(long,lat,group=group),fill=&quot;grey90&quot;,color=&quot;grey30&quot;) + geom_polygon(data=states, aes(long,lat,group=group),color=&quot;grey40&quot;) + geom_point(data = gbi_coords, aes(x,y), color=&quot;pink&quot;) + coord_sf(xlim=c(-125,-90),ylim=c(35,65))+ ggthemes::theme_map() This is a raster stack composed of 19 raster layers. frogs &lt;-data.frame(long=do_gbif2$longitude,lat=do_gbif2$latitude) climate &lt;- dismo::getData(&quot;worldclim&quot;,download = T,var=&quot;bio&quot;,res=2.5) plot(climate,legend=FALSE) frog_climate &lt;- extract(climate,frogs) frog_climate %&gt;% head(3) bio1 bio2 bio3 bio4 bio5 bio6 bio7 bio8 bio9 bio10 bio11 bio12 bio13 bio14 [1,] 100 85 34 5669 237 -11 248 32 171 171 27 1737 248 53 [2,] 72 88 33 6123 220 -43 263 1 151 151 -4 1514 225 47 [3,] 59 83 35 5268 194 -40 234 1 127 129 -3 1731 258 49 bio15 bio16 bio17 bio18 bio19 [1,] 48 731 184 184 667 [2,] 50 656 161 161 599 [3,] 50 749 178 195 687 Apply the Bioclim algorithm used for species distribution modeling, the classic climate-envelope-model. It computes the similarity of a location by comparing the values of environmental variables at any location to a percentile distribution of the values at known locations of occurrence. More info here: ?dismo::bioclim We use the pairs(x, v=NULL, pa='pa', hist=TRUE, cor=TRUE) function to plot the results of the model, with options from the {dismo} package. require(dismo) bioclim.mod &lt;- dismo::bioclim(frog_climate) pairs(bioclim.mod,pa=&quot;pa&quot;) Now, let’s build a stack with the stack() function, including all the bioclimatic layers from the original raster stack. doParallel::registerDoParallel() predictors &lt;- stack(climate$bio1,climate$bio2,climate$bio3, climate$bio4,climate$bio5, climate$bio6,climate$bio7,climate$bio8, climate$bio9,climate$bio10,climate$bio11, climate$bio12,climate$bio13,climate$bio14, climate$bio15,climate$bio16,climate$bio17, climate$bio18,climate$bio19) predictions &lt;- predict(predictors,bioclim.mod) plot(predictions,xlim=c(-125,-100),ylim=c(35,55),axes=T) "],["case-study-2-disease-mapping.html", "Chapter 4 Case study 2: Disease mapping", " Chapter 4 Case study 2: Disease mapping The aim of disease mapping is to provide a representation of the spatial distribution of the risk of a disease in the study area, which we assume is divided into several non-overlapping smaller regions. The risk may reflect actual deaths due to the disease (mortality) or, if it is not fatal, the number of people who suffer from the disease (morbidity) in a certain period of time for the population at risk. 17 A simple measure of disease risk in areas is the standardized incidence ratio (SIR). 18 Applied Spatial Data Analysis with R↩︎ areal data theory↩︎ "],["conclusion.html", "Chapter 5 Conclusion", " Chapter 5 Conclusion This is the end of our tutorial on how to spatial modeling with R. The most interesting part of this overall introduction is how to manage different packages dealing with both raster and vector data. We now know how to deal with different type of data for making a map, and are aware of the model adjustments that are required for making a spatial model. Important to mention are the weights and the distances, these two factors are very important for influencing the results of a model predictor. Good luck with your maps! I look forward to seeing your future Twitter posts for the next #30DayMapChallenge edition 2022. "],["references.html", "Chapter 6 References", " Chapter 6 References Where to start: https://rspatial.org/ Overview by Cran on Spatials: https://cran.r-project.org/web/views/Spatial.html A list of packages: https://github.com/cran-task-views/Spatial/blob/main/Spatial.md Carpenteries: https://datacarpentry.org/lessons/#geospatial-curriculum Books to start: Geocomputation with R Applied Spatial Data Analysis with R Other references: Spatial Data Science Introduction to Spatial Data Programming with R usethis: - An Introduction to R for Spatial Analysis and Mapping - Consumer Data Research Center Extra: A free introduction to geo "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
